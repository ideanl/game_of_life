// Generated by CoffeeScript 1.7.1
(function() {
  var GameOfLife,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  GameOfLife = (function() {
    GameOfLife.prototype.cellSize = 7;

    GameOfLife.prototype.numberOfRows = 50;

    GameOfLife.prototype.numberOfColumns = 50;

    GameOfLife.prototype.seedProbability = 0.5;

    GameOfLife.prototype.tickLength = 100;

    function GameOfLife() {
      this.tick = __bind(this.tick, this);
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      this.seed();
      this.tick();
    }

    GameOfLife.prototype.createCanvas = function() {
      this.canvas = document.createElement('canvas');
      return $('#body-container').append(this.canvas);
    };

    GameOfLife.prototype.resizeCanvas = function() {
      this.canvas.height = this.cellSize * this.numberOfRows;
      this.canvas.width = this.cellSize * this.numberOfColumns;
      $(this.canvas).css({
        'position': 'absolute',
        'left': '50%',
        'top': '50%'
      });
      $(this.canvas).css('margin-left', "-" + (this.canvas.width / 2) + "px");
      return $(this.canvas).css('margin-top', "-" + (this.canvas.height / 2) + "px");
    };

    GameOfLife.prototype.createDrawingContext = function() {
      return this.context = this.canvas.getContext('2d');
    };

    GameOfLife.prototype.seed = function() {
      var column, row, seedCell, _i, _ref, _results;
      this.currentCells = [];
      _results = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.currentCells[row] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            seedCell = this.createSeedCell(row, column);
            _results1.push(this.currentCells[row][column] = seedCell);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.createSeedCell = function(row, column) {
      return {
        isAlive: Math.random() < this.seedProbability,
        row: row,
        column: column
      };
    };

    GameOfLife.prototype.drawGrid = function() {
      var column, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.drawCell(this.currentCells[row][column]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.drawCell = function(cell) {
      var fillStyle, x, y;
      y = this.cellSize * cell.row;
      x = this.cellSize * cell.column;
      if (cell.isAlive) {
        fillStyle = 'rgb(242, 198, 65)';
      } else {
        fillStyle = 'rgb(38, 38, 38)';
      }
      this.context.strokeStyle = 'rgba(242, 198, 65, 0.1)';
      this.context.strokeRect(x, y, this.cellSize, this.cellSize);
      this.context.fillStyle = fillStyle;
      return this.context.fillRect(x, y, this.cellSize, this.cellSize);
    };

    GameOfLife.prototype.tick = function() {
      this.drawGrid();
      this.evolveCellGeneration();
      return setTimeout(this.tick, this.tickLength);
    };

    GameOfLife.prototype.evolveCellGeneration = function() {
      var column, evolvedCell, newCellGeneration, row, _i, _j, _ref, _ref1;
      newCellGeneration = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        newCellGeneration[row] = [];
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          evolvedCell = this.evolveCell(this.currentCells[row][column]);
          newCellGeneration[row][column] = evolvedCell;
        }
      }
      return this.currentCells = newCellGeneration;
    };

    GameOfLife.prototype.evolveCell = function(cell) {
      var evolvedCell, numberOfAliveNeighbors;
      evolvedCell = {
        row: cell.row,
        column: cell.column,
        isAlive: cell.isAlive
      };
      numberOfAliveNeighbors = this.countAliveNeighbors(cell);
      if (cell.isAlive || numberOfAliveNeighbors === 3) {
        evolvedCell.isAlive = (1 < numberOfAliveNeighbors && numberOfAliveNeighbors < 4);
      }
      return evolvedCell;
    };

    GameOfLife.prototype.countAliveNeighbors = function(cell) {
      var column, lowerColumnBound, lowerRowBound, numberOfAliveNeighbors, row, upperColumnBound, upperRowBound, _i, _j;
      lowerRowBound = Math.max(cell.row - 1, 0);
      upperRowBound = Math.min(cell.row + 1, this.numberOfRows - 1);
      lowerColumnBound = Math.max(cell.column - 1, 0);
      upperColumnBound = Math.min(cell.column + 1, this.numberOfColumns - 1);
      numberOfAliveNeighbors = 0;
      for (row = _i = lowerRowBound; lowerRowBound <= upperRowBound ? _i <= upperRowBound : _i >= upperRowBound; row = lowerRowBound <= upperRowBound ? ++_i : --_i) {
        for (column = _j = lowerColumnBound; lowerColumnBound <= upperColumnBound ? _j <= upperColumnBound : _j >= upperColumnBound; column = lowerColumnBound <= upperColumnBound ? ++_j : --_j) {
          if (row === cell.row && column === cell.column) {
            continue;
          }
          if (this.currentCells[row][column].isAlive) {
            numberOfAliveNeighbors++;
          }
        }
      }
      return numberOfAliveNeighbors;
    };

    return GameOfLife;

  })();

  window.GameOfLife = GameOfLife;

  $(document).ready(function() {
    return $(document).on('click', '.play', function(e) {
      $('#canvas').show();
      $('.play').hide();
      new GameOfLife();
      return e.preventDefault();
    });
  });

}).call(this);

//# sourceMappingURL=main.map
